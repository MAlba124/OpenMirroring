// Copyright (C) 2025 Marcus L. Hanestad <marlhan@proton.me>
//
// This file is part of OpenMirroring.
//
// OpenMirroring is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// OpenMirroring is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with OpenMirroring.  If not, see <https://www.gnu.org/licenses/>.

import { Palette, VerticalBox, HorizontalBox, ListView, Spinner, Button } from "std-widgets.slint";

import { HorizontalRule } from "horizontal-rule.slint";
import { ToolTipArea } from "tool-tip-area.slint";

export enum ReceiverState {
    Connectable,
    Connecting,
    Connected,
    Inactive,
}

export struct ReceiverItem {
    name: string,
    state: ReceiverState,
}

component FormInput {
    in property <string> label;
    in property <length> container-height;

    HorizontalBox {
        Text {
            text <=> label;
            vertical-alignment: center;
        }

        Rectangle {
            border-width: 2px;
            border-radius: 4px;
            border-color: Palette.border;
            height <=> container-height;
            @children
        }
    }
}

export component CastDialog {
    callback closed();
    callback connect(string);
    callback disconnect();
    callback add-receiver-manually(name: string, addr: string, port: string);

    in property <[ReceiverItem]> receivers-model;
    in property <length> border-radius;
    in property <length> root-height;

    property <bool> in-manual-edit: false;

    height: min(box.preferred-height + receivers-model.length * 45px, root-height);

    Rectangle {
        background: Palette.background;
        border-radius <=> root.border-radius;
    }

    box := VerticalBox {
        HorizontalBox {
            alignment: space-between;
            Text {
                font-weight: 800;
                font-size: 12pt;
                text: "Cast To";
                vertical-alignment: center;
            }

            ToolTipArea {
                text: "Close";
                Button {
                    icon: @image-url("../assets/icons/xmark.svg");
                    colorize-icon: true;
                    clicked => {
                        root.closed();
                    }
                }
            }
        }

        HorizontalRule {
            height: 2px;
            color: Palette.border;
            z: -1;
        }

        if receivers-model.length > 0: VerticalBox {
            alignment: center;
            ListView {
                height: 100%;

                for receiver in receivers-model: HorizontalBox {
                    alignment: space-between;
                    Text {
                        text: receiver.name;
                        vertical-alignment: center;
                    }

                    if receiver.state == ReceiverState.Connectable: Button {
                        text: "Connect";
                        clicked => {
                            connect(receiver.name);
                        }
                    }
                    if receiver.state == ReceiverState.Connecting: Spinner {
                        indeterminate: true;
                    }
                    if receiver.state == ReceiverState.Connected: Button {
                        text: "Disconnect";
                        clicked => {
                            disconnect();
                        }
                    }
                }
            }
        }

        HorizontalBox {
            alignment: center;
            Text {
                text: "Receivers will be added automatically once they announce themselves on the network";
                font-italic: true;
                wrap: word-wrap;
            }
        }

        HorizontalRule {
            height: 2px;
            color: Palette.border;
            z: -1;
        }

        if !in-manual-edit: Button {
            text: "Add manually";
            clicked => {
                in-manual-edit = true;
            }
        }

        if in-manual-edit: VerticalBox {
            FormInput {
                label: "Name:";
                container-height: ti-name.preferred-height + 8px;
                ti-name := TextInput {
                    horizontal-alignment: center;
                    vertical-alignment: center;
                }
            }

            FormInput {
                label: "Address:";
                container-height: ti-addr.preferred-height + 8px;
                ti-addr := TextInput {
                    horizontal-alignment: center;
                    vertical-alignment: center;
                }
            }

            FormInput {
                label: "Port:";
                container-height: ti-port.preferred-height + 8px;
                ti-port := TextInput {
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    text: "46899";
                    input-type: number;
                }
            }

            HorizontalBox {
                Button {
                    text: "Cancel";
                    clicked => {
                        in-manual-edit = false;
                    }
                }

                Button {
                    text: "Add";
                    enabled: !ti-name.text.is-empty && !ti-addr.text.is-empty && !ti-port.text.is-empty;
                    clicked => {
                        add-receiver-manually(ti-name.text, ti-addr.text, ti-port.text);
                        in-manual-edit = false;
                    }
                }
            }
        }
    }
}
