// Copyright (C) 2025 Marcus L. Hanestad <marlhan@proton.me>
//
// This file is part of OpenMirroring.
//
// OpenMirroring is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// OpenMirroring is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with OpenMirroring.  If not, see <https://www.gnu.org/licenses/>.

import { Spinner, HorizontalBox, Button, Palette, VerticalBox, Slider } from "std-widgets.slint";
import { HorizontalRule } from "../../ui-common/horizontal-rule.slint";

// TODO: animate in and out transitions
component ErrorAlert {
    in property <string> message;

    visible: false;

    public function show() {
        self.visible = true;
        timer.counter = 0;
        timer.running = true;
    }

    function close() {
        self.visible = false;
        timer.running = true;
    }

    states [
        hover when ta.has-hover: {
            im.colorize: #DEDEDE;
        }
    ]

    Rectangle {
        height: hb.preferred-height;
        background: #FF4131;
        border-radius: 8px;

        hb := HorizontalBox {
            alignment: space-between;
            Text {
                color: white;
                vertical-alignment: center;
                text <=> message;
                wrap: word-wrap;
                font-weight: 800;
            }

            ta := TouchArea {
                height: 32px;
                width: 32px;
                clicked => {
                    root.close();
                }
                Rectangle {
                    im := Image {
                        height: 100%;
                        source: @image-url("../../assets/icons/xmark.svg");
                        colorize: white;
                        animate colorize { duration: 150ms; }
                    }
                }
            }
        }
    }

    timer := Timer {
        property <int> counter: 0;
        interval: 1s;
        running: true;
        triggered => {
            counter += 1;
            if counter >= 4 {
                root.close();
            }
        }
    }
}

export enum GuiPlaybackState {
    Playing,
    Paused,
    Loading,
    Live,
}

component PlaybackControl {
    visible: false;

    // TODO: volume changeer
    // TODO: speed changer

    in property <string> progress-label;
    in-out property <GuiPlaybackState> pb-state;

    property <bool> is-scrubbing: false;

    callback resume-or-pause;
    callback seek-to-percent(float);

    public function show() {
        root.visible = true;
        tim.counter = 0;
    }

    public function close() {
        root.visible = false;
    }

    public function playback-started() {
        show();
    }

    public function playback-stopped() {
        show();
    }

    public function update-progress-percent(percent: float) {
        if !is-scrubbing {
            scrubber.value = percent;
        }
    }

    function scrubber-changed() {
        // Make the bar not disipear when the user is engaging with the scrubber
        is-scrubbing = true;
        show();
    }

    Rectangle {
        background: Palette.alternate-background;
        opacity: 80%;
        border-radius: 8px;

        HorizontalBox {
            if pb-state == GuiPlaybackState.Loading: Spinner {
                indeterminate: true;
            }
            // TODO: rect with touch area and icon or something so the button border etc. can be omitted
            if pb-state == GuiPlaybackState.Playing: Button {
                icon: @image-url("../../assets/icons/video_pause.svg");
                colorize-icon: true;
                clicked => {
                    resume-or-pause();
                }
            }
            if pb-state == GuiPlaybackState.Paused: Button {
                icon: @image-url("../../assets/icons/video_play.svg");
                colorize-icon: true;
                clicked => {
                    resume-or-pause();
                }
            }
            if pb-state == GuiPlaybackState.Live: Text {
                text: "LIVE";
                font-weight: 800;
                vertical-alignment: center;
            }
            scrubber := Slider {
                maximum: 100;
                value: 0;
                enabled: pb-state != GuiPlaybackState.Loading && pb-state != GuiPlaybackState.Live;
                changed(_) => {
                    scrubber-changed();
                }
                released(position) => {
                    is-scrubbing = false;
                    seek-to-percent(position);
                }
            }

            Text {
                text <=> progress-label;
                vertical-alignment: center;
            }
        }
    }

    tim := Timer {
        property <int> counter;
        interval: 500ms;
        running: true;
        triggered => {
            counter += 1;
            // Wait 500ms * 3 before hiding the bar
            if counter >= 3 {
                parent.close();
            }
        }
    }
}

// TODO: on screen controls for video playback
export component MainWindow inherits Window {
    title: "Open Mirroring Receiver";

    in property <string> label;
    in property <string> progress-label;
    in property <GuiPlaybackState> playback-state;

    in-out property <bool> playing: false;

    property <int> connected_devices: 0;

    callback resume-or-pause;
    callback seek-to-percent(float);

    public function playback-started() {
        playing = true;
        playback-control.playback-started();
    }

    // TODO: playback-paused?

    public function playback-stopped() {
        playing = false;
        playback-control.playback-stopped();
    }

    public function playback-stopped-with-error(error: string) {
        playing = false;
        error-alert.message = error;
        error-alert.show();
        playback-control.playback-stopped();
    }

    public function device-connected() {
        connected_devices += 1;
    }

    public function device-disconnected() {
        connected_devices = max(connected_devices - 1, 0);
    }

    public function update-progress-percent(percent: float) {
        playback-control.update-progress-percent(percent);
    }

    HorizontalBox {
        visible: !playing;

        alignment: space-around;
        VerticalBox {
            alignment: center;
            Text {
                font-size: 26pt;
                text: "OpenMirroring";
                font-weight: 800; // bold
                horizontal-alignment: center;
            }

            if connected_devices == 0: Text {
                font-size: 12pt;
                text: "Waiting for a connection";
                horizontal-alignment: center;
            }
            if connected_devices == 0: Spinner {
                indeterminate: true;
            }
            if connected_devices > 0: Text {
                font-size: 12pt;
                text: "Device is connected";
                horizontal-alignment: center;
            }
        }

        VerticalBox {
            alignment: center;
            Rectangle {
                background: whitesmoke.with-alpha(60%);
                border-radius: 8px;
                border-color: white.with-alpha(60%);
                border-width: 2px;
                VerticalBox {
                    Text {
                        horizontal-alignment: center;
                        text: "Manual connection information";
                        font-size: 12pt;
                    }

                    HorizontalRule {
                        color: white.with-alpha(60%);
                        height: 2px;
                    }

                    Text {
                        horizontal-alignment: center;
                        text: "IPs";
                    }

                    if !playing && label.is-empty: Spinner {
                        indeterminate: true;
                    }
                    if !playing && !label.is-empty: Text {
                        horizontal-alignment: center;
                        text <=> label;
                    }
                    Text {
                        horizontal-alignment: center;
                        text: "Port";
                    }

                    Text {
                        horizontal-alignment: center;
                        text: "46899 (TCP)";
                    }

                    Text {
                        horizontal-alignment: center;
                        text: "Automatic discovery is available via mDNS";
                    }
                }
            }
        }
    }

    // TODO: subtitles

    // TODO: keypress handling
    TouchArea {
        width: 100%;
        height: 100%;

        visible: playing;

        pointer-event(pe) => {
            if pe.kind == PointerEventKind.move {
                playback-control.show();
            }
        }

        playback-control := PlaybackControl {
            width: parent.width - 10px * 2;
            y: parent.height - self.height - 10px;
            progress-label <=> progress-label;
            pb-state: playback-state;

            resume-or-pause => {
                resume-or-pause();
            }

            seek-to-percent(percent) => {
                seek-to-percent(percent);
            }
        }
    }

    error-alert := ErrorAlert {
        width: min(parent.width * 0.8, 700px);
        y: parent.height - self.height - 20px;
    }
}
