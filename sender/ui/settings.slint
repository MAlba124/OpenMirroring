// Copyright (C) 2025 Marcus L. Hanestad <marlhan@proton.me>
//
// This file is part of OpenMirroring.
//
// OpenMirroring is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// OpenMirroring is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with OpenMirroring.  If not, see <https://www.gnu.org/licenses/>.

import { Palette, VerticalBox, HorizontalBox, StandardButton, Switch, Button, ComboBox } from "std-widgets.slint";

import { HorizontalRule } from "../../ui-common/horizontal-rule.slint";
import { ToolTipArea } from "../../ui-common/tool-tip-area.slint";
import { LabeledLineEdit } from "../../ui-common/input.slint";

export component Settings {
    callback closed();
    callback include-ipv6-addresses(bool);

    in property <length> border-radius;
    in property <[string]> stream-addresses;

    pure function is-valid-port-number(port: int) -> bool {
        port >= 1 && port <= 65535
    }

    public function currently-selected-address() -> { idx: int,port: int} {
        {
            idx: stream-address-combo.current-index,
            port: ti-stream-port.text.to-float()
        }
    }

    Rectangle {
        background: Palette.background;
        border-radius <=> border-radius;
    }

    vb := VerticalBox {
        width: 100%;
        HorizontalBox {
            alignment: space-between;
            Text {
                font-weight: 800;
                font-size: 12pt;
                text: "Settings";
                vertical-alignment: center;
            }

            ToolTipArea {
                text: "Close";
                Button {
                    icon: @image-url("../../assets/icons/xmark.svg");
                    colorize-icon: true;
                    clicked => {
                        root.closed();
                    }
                }
            }
        }

        HorizontalRule {
            height: 2px;
            color: Palette.alternate-background;
            z: -1;
        }

        HorizontalBox {
            alignment: space-between;
            Text {
                text: "Dark Mode";
            }

            Switch {
                horizontal-stretch: 0;
                checked: Palette.color-scheme == ColorScheme.dark;
                toggled => {
                    Palette.color-scheme = self.checked ? ColorScheme.dark : ColorScheme.light;
                }
            }
        }

        ti-stream-port := LabeledLineEdit {
            label: "Media stream port:";
            input-type: number;
            text: "3000";
        }

        if !is-valid-port-number(ti-stream-port.text.to-float()): Text {
            horizontal-alignment: center;
            text: "Port is not in the valid range (1-65535)";
        }

        VerticalLayout {
            HorizontalBox {
                Text {
                    text: "Media stream address:";
                    vertical-alignment: center;
                }

                stream-address-combo := ComboBox {
                    model: stream-addresses;
                }
            }

            // TODO:
            // HorizontalBox {
            //     Text {
            //         text: "Include IPv6 addresses";
            //     }

            //     Switch {
            //         horizontal-stretch: 0;
            //         checked: false;
            //         enabled: false;
            //         toggled => {
            //         }
            //     }
            // }
        }
    }
}
